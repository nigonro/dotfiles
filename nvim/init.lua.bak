require("packer").startup(function(use)
	use "wbthomason/packer.nvim"

	use "itchyny/lightline.vim"

	use "christoomey/vim-tmux-navigator"

	use "blueyed/vim-diminactive"
	use "tpope/vim-fugitive"
	use "tpope/vim-surround"
	use "scrooloose/nerdcommenter"
	use "jlanzarotta/bufexplorer"

	use "editorconfig/editorconfig-vim"

	use "mattn/emmet-vim"

	use "prabirshrestha/vim-lsp"
	use "mattn/vim-lsp-settings"
	use "mattn/vim-lsp-icons"

	use "hrsh7th/cmp-vsnip"
	use "hrsh7th/vim-vsnip"
end)

--
-- general
--
vim.opt.wrap = false
vim.opt.encoding = "UTF-8"
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.softtabstop = 4
vim.opt.expandtab = false
vim.opt.autoindent = true
vim.opt.smartindent = true
vim.opt.clipboard = "unnamedplus"
vim.opt.signcolumn = "yes"
vim.opt.termguicolors = false
vim.opt.cursorline = true
vim.opt.number = true
vim.opt.signcolumn = "yes"
vim.opt.completeopt = "menu,menuone,noselect"
vim.opt.ttyfast = true
vim.opt.lazyredraw = true
vim.opt.wildmenu = true
vim.opt.pumheight = 10
vim.opt.colorcolumn = "81"
vim.opt.incsearch = true
vim.opt.hlsearch = true
vim.opt.ignorecase = true
vim.opt.smartcase = true

--
-- mappings
--
vim.g.mapleader = ","
vim.cmd([[colorscheme nofrils-acme]])

local opts = {noremap = true, silent = true}
vim.keymap.set("n", "<leader>w", ":w!<cr>", {noremap = true})
vim.keymap.set("n", "<leader>wa", ":wall!<cr>", {noremap = true})

vim.keymap.set("i", "jk", "<esc>", opts)

vim.keymap.set("", "Q", "<Nop>", opts)
vim.keymap.set("", "q", "<Nop>", opts)

vim.keymap.set("n", "vv", ":vsplit<cr>", opts)
vim.keymap.set("n", "vs", ":split<cr>", opts)
vim.keymap.set("n", "<leader>q", ":close<cr>", opts)

vim.keymap.set("", "<Tab>", "^==<Esc>", opts)

vim.keymap.set("", "<leader><space>", ":nohlsearch<cr>", opts)

vim.keymap.set("n", "<leader>rc", ":source $MYVIMRC<cr>", opts)

vim.cmd([[
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Qa! qa!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall
cnoreabbrev Qa qa
]])

--
-- tmux-navigator
--
vim.g.tmux_navigator_no_mappings = 1
vim.g.tmux_navigator_save_on_switch = 1

vim.keymap.set("n", "<c-h>", ":TmuxNavigateLeft<cr>", opts)
vim.keymap.set("n", "<c-j>", ":TmuxNavigateDown<cr>", opts)
vim.keymap.set("n", "<c-k>", ":TmuxNavigateUp<cr>", opts)
vim.keymap.set("n", "<c-l>", ":TmuxNavigateRight<cr>", opts)

vim.keymap.set("i", "<c-h>", "<esc>:TmuxNavigateLeft<cr>", opts)
vim.keymap.set("i", "<c-j>", "<esc>:TmuxNavigateDown<cr>", opts)
vim.keymap.set("i", "<c-k>", "<esc>:TmuxNavigateUp<cr>", opts)
vim.keymap.set("i", "<c-l>", "<esc>:TmuxNavigateRight<cr>", opts)

--
-- lualine
--
require("lualine").setup{
	options = {
		icons_enabled = false,
		theme = "solarized_light",
		--component_separators = { left = "|", right = "|"},
		--section_separators = { left = "", right = ""},
		disabled_types = { "NvimTree" },
	},
}

--
-- telescope
--
require("telescope").load_extension "file_browser"
vim.keymap.set("n", "<leader>ff", ":Telescope find_files<cr>", opts)
vim.keymap.set("n", "<leader>fg", ":Telescope live_grep<cr>", opts)
vim.keymap.set("n", "<leader>fb", ":Telescope buffers<cr>", opts)
vim.keymap.set("n", "<leader>fh", ":Telescope help_tags<cr>", opts)
vim.keymap.set("n", "<leader>n", ":Telescope file_browser<cr>", opts)

--
-- Native LSP Setup
-- Global setup.
vim.diagnostic.config({
  virtual_text = false,
  signs = true,
  underline = false,
})

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.setup({
    ui = {
        icons = {
            server_installed = "✓",
            server_pending = "➜",
            server_uninstalled = "✗"
        },
		border = "rounded",
    },
})

local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local feedkey = function(key, mode)
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
end

--
-- nvim-cmp
--
local cmp = require"cmp"
cmp.setup({
	snippet = {
		expand = function(args)
			vim.fn["vsnip#anonymous"](args.body)
		end,
	},
	window = {
	   completion = cmp.config.window.bordered(),
	   documentation = cmp.config.window.bordered(),
    },
	mapping = cmp.mapping.preset.insert({
		["<C-b>"] = cmp.mapping.scroll_docs(-4),
		["<C-f>"] = cmp.mapping.scroll_docs(4),
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.abort(),
		["<CR>"] = cmp.mapping.confirm({ select = true }),
		["<Tab>"] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_next_item()
			elseif vim.fn["vsnip#available"](1) == 1 then
				feedkey("<Plug>(vsnip-expand-or-jump)", "")
			elseif has_words_before() then
				cmp.complete()
			else
				fallback() -- The fallback function sends a already mapped key. In this case, it"s probably `<Tab>`.
			end
		end, { "i", "s" }),
		["<S-Tab>"] = cmp.mapping(function()
			if cmp.visible() then
				cmp.select_prev_item()
			elseif vim.fn["vsnip#jumpable"](-1) == 1 then
				feedkey("<Plug>(vsnip-jump-prev)", "")
			end
		end, { "i", "s" }),
	}),
	sources = cmp.config.sources({
		{ name = "nvim_lsp" },
		{ name = "vsnip" },
	}, {
		{ name = "buffer" },
	})
})

local capabilities = require("cmp_nvim_lsp").update_capabilities(vim.lsp.protocol.make_client_capabilities())

local on_attach = function(client, bufnr)
	-- Enable completion triggered by <c-x><c-o>
	vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

	-- Mappings.
	local bufopts = { noremap=true, silent=true, buffer=bufnr }

	--vim.keymap.set("n", "<leader>D", vim.diagnostic.setloclist, bufopts)
	vim.keymap.set("n", "<leader>D", "<cmd>Telescope diagnostics<cr>", bufopts)
	vim.keymap.set("n", "<leader>e", vim.diagnostic.open_float, bufopts)
	vim.keymap.set("n", "[d", vim.diagnostic.goto_prev, bufopts)
	vim.keymap.set("n", "]d", vim.diagnostic.goto_next, bufopts)
	--vim.keymap.set("n", "[d", "<cmd>Lspsaga diagnostic_jump_next<cr>", bufopts)
	--vim.keymap.set("n", "]d", "<cmd>Lspsaga diagnostic_jump_prev<cr>", bufopts)

	vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
	--vim.keymap.set("n", "K", "<cmd>Lspsaga hover_doc<cr>", bufopts)
	vim.keymap.set("n", "<leader>S", vim.lsp.buf.signature_help, bufopts)
	--vim.keymap.set("n", "gs", "<Cmd>Lspsaga signature_help<cr>", bufopts)
	vim.keymap.set("n", "gi", "<cmd>Telescope lsp_implementations<CR>", bufopts)
	vim.keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<CR>", bufopts)
	--vim.keymap.set("n", "gd", "<cmd>Lspsaga preview_definition<cr>", bufopts)
	vim.keymap.set("n", "gt", vim.lsp.buf.type_definition, bufopts)

	--vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, bufopts)
	vim.keymap.set("n", "<leader>ca", "<cmd>Telescope lsp_code_actions<CR>", bufopts)
	--vim.keymap.set("n", "<leader>ca", "<cmd>Lspsaga code_action<cr>", bufopts)
	--vim.keymap.set("v", "<leader>ca", "<cmd><C-U>Lspsaga range_code_action<cr>", bufopts)

	vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, bufopts)
	--vim.keymap.set("n", "gr", "<cmd>Lspsaga rename<cr>", bufopts)
	vim.keymap.set("n", "<space>f", vim.lsp.buf.formatting, bufopts)

	if client.server_capabilities.document_formatting then
		vim.cmd([[
		augroup formatting
		autocmd! * <buffer>
		autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_seq_sync()
		autocmd BufWritePre <buffer> lua OrganizeImports(1000)
		augroup END
		]])
	end

	-- Set autocommands conditional on server_capabilities
	if client.server_capabilities.document_highlight then
		vim.cmd([[
		augroup lsp_document_highlight
		autocmd! * <buffer>
		autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
		autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
		augroup END
		]])
	end
end

-- organize imports
-- https://github.com/neovim/nvim-lspconfig/issues/115#issuecomment-902680058
function OrganizeImports(timeoutms)
	local params = vim.lsp.util.make_range_params()
	params.context = { only = { "source.organizeImports" } }
	local result = vim.lsp.buf_request_sync(0, "textDocument/codeAction", params, timeoutms)
	for _, res in pairs(result or {}) do
		for _, r in pairs(res.result or {}) do
			if r.edit then
				vim.lsp.util.apply_workspace_edit(r.edit, "UTF-8")
			else
				vim.lsp.buf.execute_command(r.command)
			end
		end
	end
end

--
-- lspconfig
--
local lspconfig = require("lspconfig")
lspconfig.util.default_config = vim.tbl_extend(
    "force",
    lspconfig.util.default_config,
    {
        on_attach = on_attach
    }
)

for _, server in ipairs(lsp_installer.get_installed_servers()) do
  lspconfig[server.name].setup {}
end

